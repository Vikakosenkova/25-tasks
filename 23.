class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert(self, data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
            return
            
        new_node = Node(data)
        temp_node = self.head  
        while temp_node.next is not None:
            temp_node = temp_node.next

        temp_node.next = new_node
        new_node.prev = temp_node

    def delate_back(self):
       if self.start_node is None:
          print("The Linked list is empty, r
          return
       if self.start_node.next is None:
          self.start_node = None
          return
       n = self.start_node
       while n.next is not None:
          n = n.next
       n.prev.next = None
       
    def get_item(self):
      if self.start_node is None:
        print("The list is empty")
        return
      else:
        n = self.start_node
        while n is not None:
          print("Element is:" n.item)
          n = n.next
      print("\n")

        
